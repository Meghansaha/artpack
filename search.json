[{"path":"https://meghansaha.github.io/artpack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 artpack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://meghansaha.github.io/artpack/articles/brief_examples.html","id":"brief-examples","dir":"Articles","previous_headings":"","what":"Brief Examples","title":"brief_examples","text":"aRtpack can used create specified dataframes map art fed ggplot2 functions: example, square_data() creates data frame maps square ggplot:   rotator mathematically “rotate” existing data points data frame:  aRtpack functions designed used part workflow. Experiment cool results:","code":"library(ggplot2) library(artpack)  # Use the function to create a data frame # df_square <-   square_data(x = 0,               y = 0,               size = 5,               color = \"purple\",               fill = \"black\"               )  # Feed it into a ggplot # df_square |>   ggplot(aes(x = x, y = y)) +   geom_polygon(     fill = df_square$fill,     color = df_square$color,     linewidth = 2   ) +   coord_equal() library(ggplot2) library(artpack)  original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) )  rotated_square <- rotator(   data = original_square,   x = x,   y = y,   angle = 120,   anchor = \"center\" )  ggplot()+   geom_path(data = original_square,             aes(x,y),             color = \"red\") +   geom_polygon(data = rotated_square,                aes(x,y),                fill = \"green\") +   coord_equal() library(ggplot2) library(purrr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(artpack)  # Create a base square # square <- square_data(x = 0, y = 0, size = 1, group_var = TRUE)   # Create square specs to be iterated on # n_square <- 50 scaler <-seq(1,5, length = n_square) fills <- art_pals(\"imagination\", n = n_square) angles <- seq(0,360, length = n_square) group_n <- group_numbers(1:n_square)  # Add a random transformation for a little razzle dazzle ✨ theta <- seq(0,2*pi, length = 250)  list_opts <- list(scaler,                   fills,                   angles,                   group_n)  df <- pmap(list_opts, ~rotator(square |>                                  mutate(x = (x + ..1),                                         y = (y + ..1) ,                                         fill = ..2,                                         group = paste0(group,..4)                                  ),                                x = x, y = y, angle = ..3) ) |>    list_rbind() |>   mutate(x = x * cos(theta) + x,          y = y * sin(theta))    df |>   ggplot(aes(x = x, y = y, group = group)) +   theme_void()+   theme(plot.background = element_rect(fill = \"#000000\")) +   geom_polygon(     fill = df$fill,     color = \"#000000\",      alpha = .5   ) +   coord_equal(expand = FALSE)"},{"path":"https://meghansaha.github.io/artpack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Meghan Harris. Author, maintainer, copyright holder.","code":""},{"path":"https://meghansaha.github.io/artpack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harris M (2023). artpack: \"Assists Creating Generative Art\". R package version 0.1.0.9001, https://meghansaha.github.io/artpack/.","code":"@Manual{,   title = {artpack: \"Assists with Creating Generative Art\"},   author = {Meghan Harris},   year = {2023},   note = {R package version 0.1.0.9001},   url = {https://meghansaha.github.io/artpack/}, }"},{"path":"https://meghansaha.github.io/artpack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"","text":"can install {artpack} CRAN following code: can install development version artpack GitHub :","code":"install.packages(\"artpack\") # install.packages(\"devtools\") devtools::install_github(\"Meghansaha/artpack\")"},{"path":"https://meghansaha.github.io/artpack/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"","text":"aRtpack package helps users create generative art R “data-centric” approach currently early development. aRtpack intended used ggplot2 artistic purposes.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"what-does-data-centric-mean-in-this-context","dir":"","previous_headings":"Overview","what":"What does data-centric mean in this context?","title":"","text":"“data-centric” means package focuses providing direct data outputs user, opposed providing geom_fxs() like supplemental packages.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"why-data-outputs-wouldnt-geoms-be-more-efficient-or-user-friendly","dir":"","previous_headings":"Overview","what":"Why data outputs? Wouldn’t geoms be more efficient or user-friendly?","title":"","text":"necessarily. Data outputs provided afford user freedom manipulation choice. aRtpack developed make user’s life easier making data generation ggplot2 art easier. data outputs intended used existing ggplot2 geoms like geom_polygon() geom_path(). artistic purposes, can much easier user manipulate direct data frames, opposed trying “hack” geoms.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"brief-examples","dir":"","previous_headings":"","what":"Brief Examples","title":"","text":"aRtpack can used create specified dataframes map art fed ggplot2 functions: example, square_data() creates data frame maps square ggplot:   rotator mathematically “rotate” existing data points data frame:  aRtpack functions designed used part workflow. Experiment cool results:","code":"library(ggplot2) library(artpack)  # Use the function to create a data frame # df_square <-   square_data(x = 0,               y = 0,               size = 5,               color = \"purple\",               fill = \"black\"               )  # Feed it into a ggplot # df_square |>   ggplot(aes(x = x, y = y)) +   geom_polygon(     fill = df_square$fill,     color = df_square$color,     linewidth = 2   ) +   coord_equal() library(ggplot2) library(artpack)  original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) )  rotated_square <- rotator(   data = original_square,   x = x,   y = y,   angle = 120,   anchor = \"center\" )  ggplot()+   geom_path(data = original_square,             aes(x,y),             color = \"red\") +   geom_polygon(data = rotated_square,                aes(x,y),                fill = \"green\") +   coord_equal() library(ggplot2) library(purrr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(artpack)  # Create a base square # square <- square_data(x = 0, y = 0, size = 1, group_var = TRUE)   # Create square specs to be iterated on # n_square <- 50 scaler <-seq(1,5, length = n_square) fills <- art_pals(\"imagination\", n = n_square) angles <- seq(0,360, length = n_square) group_n <- group_numbers(1:n_square)  # Add a random transformation for a little razzle dazzle ✨ theta <- seq(0,2*pi, length = 250)  list_opts <- list(scaler,                   fills,                   angles,                   group_n)  df <- pmap(list_opts, ~rotator(square |>                                  mutate(x = (x + ..1),                                         y = (y + ..1) ,                                         fill = ..2,                                         group = paste0(group,..4)                                  ),                                x = x, y = y, angle = ..3) ) |>    list_rbind() |>   mutate(x = x * cos(theta) + x,          y = y * sin(theta))    df |>   ggplot(aes(x = x, y = y, group = group)) +   theme_void()+   theme(plot.background = element_rect(fill = \"#000000\")) +   geom_polygon(     fill = df$fill,     color = \"#000000\",      alpha = .5   ) +   coord_equal(expand = FALSE)"},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom-built aRtpack Color Palettes — art_pals","title":"Custom-built aRtpack Color Palettes — art_pals","text":"aRtpack palette picker. art_pals function consists 18 palettes: \"arctic\", \"beach\", \"bw\", \"brood\", \"cosmos\", \"explorer\", \"gemstones\", \"grays\", \"icecream\", \"imagination\", \"majestic\", \"nature\", \"neon\", \"ocean\", \"plants\", \"rainbow\", \"sunnyside\", \"super\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom-built aRtpack Color Palettes — art_pals","text":"","code":"art_pals(pal = NULL, n = 5, direction = \"regular\")"},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom-built aRtpack Color Palettes — art_pals","text":"pal character string desired aRtpack palette. 18 aRtpack palettes include: \"arctic\" - Icy blue white colors \"beach\" - Sand-colored tans ocean-colored blue colors \"bw\" - gradient black white colors \"brood\" - gradient different shades dark gray black colors \"cosmos\" - Nebula-inspired blue, purple, pink colors \"explorer\" - Pokemon-type inspired colors \"gemstones\" - Birthstone/Mineral-inspired colors \"grays\" - gradient dark, medium, light gray colors \"icecream\" - light pastel palette cream, blue, brown, pink colors \"imagination\" - 90's school supply-inspired colors \"majestic\" - Shades majestic purple colors \"nature\" - mix tan, brown, green, red colors \"neon\" - neon spectrum rainbow colors \"ocean\" - gradient dark light blue colors \"plants\" - gradient dark light green colors \"rainbow\" - vibrant mix rainbow colors \"sunnyside\" - retro-inspired mix pink, orange, yellow colors \"super\" - marveling mix heroic colors n numbers colors desired output. Default 5. n must positive integer value greater 0 direction direction palette Default \"regular\". two options accepted: \"regular\" \"reverse\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom-built aRtpack Color Palettes — art_pals","text":"Character Vector.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom-built aRtpack Color Palettes — art_pals","text":"","code":"library(ggplot2) dots <- data.frame(x = c(1:10), y = 2.5) dots$fills <- art_pals(\"rainbow\", 10)  dots |>   ggplot(aes(x, y)) +   theme_void() +   geom_point(     shape = 21,     fill = dots$fills,     color = \"#000000\",     size = 10,     stroke = 2   )    dots_rev <- data.frame(x = c(1:10), y = 2.5) dots_rev$fills <- art_pals(\"rainbow\", 10, \"reverse\")  dots_rev |>   ggplot(aes(x, y)) +   theme_void() +   geom_point(     shape = 21,     fill = dots_rev$fills,     color = \"#000000\",     size = 10,     stroke = 2   )"},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for A Custom-built Square Grid — grid_maker","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"Creates dataframe x y points visualize square grid based given x y limits. Providing color palette fill style optional.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"","code":"grid_maker(   xlim,   ylim,   size,   fill_pal = NULL,   fill_style = \"range\",   color_pal = NULL,   color_style = \"range\" )"},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"xlim numeric vector two X limits. minimum maximum limit X axis. Must length 2. ylim numeric vector two Y limits. minimum maximum limit Y axis. Must length 2. size numeric input. size grid. many shapes appear single row column. Must length 1, greater 0, less equal max xlim max ylim. fill_pal Optional. character vector 6 digit hexadecimal webcolor code, R colors() color strings applied fill grid. fill_style Optional. character input. \"range\" \"random\". Determines fill color palette mapped. color_pal Optional. character vector 6 digit hexadecimal webcolor code, R colors() color strings applied borders grid. color_style Optional. character input. \"range\" \"random\". Determines border color palette mapped.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"","code":"# Creating data for a grid:  library(ggplot2) grid_data <- grid_maker(   xlim = c(0, 50),   ylim = c(0, 50),   size = 10,   fill_pal = c(\"turquoise\", \"black\", \"purple\"),   color_pal = c(\"black\",\"limegreen\") )  ggplot() +   geom_polygon(     data = grid_data,     aes(x, y, group = group),     fill = grid_data$fill,     color = grid_data$color   ) +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"Convert Numbers Padded Strings Easier Group Numbering","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"","code":"group_numbers(numbers)"},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"numbers #numeric vector length least 1.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"#Character Vector","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"","code":"# Useful for easier group numbering so groups are ordered as intended # Expects a numeric vector of numbers to convert to padded numbers regular_numbers <- 1:19 padded_numbers <- group_numbers(regular_numbers)  # The padding matters when creating labels for groupings # as numbers will be converted to characters if attached to strings. # Sorts as expected: sort(regular_numbers) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19  # Does not as a character: sort(paste0(\"group_\", regular_numbers)) #>  [1] \"group_1\"  \"group_10\" \"group_11\" \"group_12\" \"group_13\" \"group_14\" #>  [7] \"group_15\" \"group_16\" \"group_17\" \"group_18\" \"group_19\" \"group_2\"  #> [13] \"group_3\"  \"group_4\"  \"group_5\"  \"group_6\"  \"group_7\"  \"group_8\"  #> [19] \"group_9\"   # Will sort as expected when padded: sort(paste0(\"group_\", padded_numbers)) #>  [1] \"group_01\" \"group_02\" \"group_03\" \"group_04\" \"group_05\" \"group_06\" #>  [7] \"group_07\" \"group_08\" \"group_09\" \"group_10\" \"group_11\" \"group_12\" #> [13] \"group_13\" \"group_14\" \"group_15\" \"group_16\" \"group_17\" \"group_18\" #> [19] \"group_19\""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for Circle Packing — packer","title":"Data Generation for Circle Packing — packer","text":"tool creating data frame values create circle packing design plotted. default circle_type \"whole\" used, output mapped geom_polygon ggplot. \"swirl\" used, output mapped geom_path best results.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for Circle Packing — packer","text":"","code":"packer(   n,   min_x = 0,   max_x = 100,   min_y = 0,   max_y = 100,   big_r = 5,   med_r = 3,   small_r = 1,   color_pal = NULL,   color_type = \"regular\",   circle_type = \"whole\" )"},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for Circle Packing — packer","text":"n total number circles like function attempt create. single numeric value minimum value 10. min_x minimum limit x-axis - left 'border' canvas single numeric value. max_x maximum limit x-axis - right 'border' canvas single numeric value. min_y minimum limit y-axis - bottom 'border' canvas single numeric value. max_y maximum limit y-axis - top 'border' canvas single numeric value. big_r radius used 'big' sized circles single numeric value. med_r radius used 'medium' sized circles. single numeric value. small_r radius used 'small' sized circles. single numeric value. color_pal vector hex color codes mapped data. color_type Default \"regular\" - colors mapped order big circles small circles. \"reverse\" - colors mapped reversed order small big circles. \"random\" - colors mapped randomly sized circle. circle_type Default \"whole\" - Regular circles. \"swirl\" - circles replaced spirals. Spirals mapped geom_path ggplot best results.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for Circle Packing — packer","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for Circle Packing — packer","text":"","code":"library(ggplot2) set.seed(0310) packed_circles <- packer(   n = 50, big_r = 5, med_r = 3, small_r = 1,   min_x = 0, max_x = 100, min_y = 0, max_y = 100 ) #> Big Circles Complete! #> Med Circles Complete! #> Small Circles Complete! packed_circles #> # A tibble: 5,000 × 3 #> # Groups:   group [50] #>        x     y group #>    <dbl> <dbl> <chr> #>  1  13    19   big_1 #>  2  13.0  19.3 big_1 #>  3  13.0  19.6 big_1 #>  4  12.9  19.9 big_1 #>  5  12.8  20.3 big_1 #>  6  12.8  20.6 big_1 #>  7  12.6  20.9 big_1 #>  8  12.5  21.1 big_1 #>  9  12.4  21.4 big_1 #> 10  12.2  21.7 big_1 #> # ℹ 4,990 more rows  packed_circles |>   ggplot(aes(x, y, group = group)) +   theme_void() +   theme(plot.background = element_rect(fill = \"black\")) +   geom_polygon(fill = \"white\", color = \"red\") +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"Rotates x y points given data frame given angle based designated anchor point.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"","code":"rotator(data, x, y, angle = 5, anchor = \"center\", drop = FALSE)"},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"data data frame tibble least x y variables x numeric variable data. variable intended plotted x axis ggplot. y numeric variable data. variable intended plotted y axis ggplot. angle angle (degrees) points data rotated around anchor anchor anchor point rotation. Default \"center\". Options include:\"center\", \"bottom\", \"top\", \"left\", \"right\" drop Logical TRUE FALSE determines variables rotated removed final output. Default FALSE.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"#data frame","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"","code":"library(ggplot2) original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) ) rotated_square <- rotator(data = original_square,                           x = x,                           y = y,                           angle = 45,                           anchor = \"center\")  ggplot()+   geom_path(data = original_square,                      aes(x,y),                      color = \"red\")+   geom_polygon(data = rotated_square,                         aes(x,y),                         fill = \"purple\")+   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for Squares — square_data","title":"Data Generation for Squares — square_data","text":"tool creating data frame values create square specified size plotted. geom_path geom_polygon geoms recommended data use ggplot2 generative art.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for Squares — square_data","text":"","code":"square_data(   x,   y,   size,   color = NULL,   fill = NULL,   group_var = FALSE,   group_prefix = \"square_\" )"},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for Squares — square_data","text":"x Numeric value length 1 - bottom left x value square. y Numeric value length 1 - bottom left y value square. size Numeric value length 1 must greater 0 - size square. color Character value length 1 - color square's border. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" fill Character value length 1 - color square. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" group_var Logical. Default FALSE. TRUE, group variable added dataframe. Useful iterative data generation. group_prefix Character string length 1 - prefix used group variable. Default \"square_\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for Squares — square_data","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for Squares — square_data","text":"","code":"# Creating one square library(ggplot2) one_square <- square_data(x = 0, y = 0, size = 5)  # Plot The Data one_square |>   ggplot(aes(x,y))+   geom_path(color = \"green\")+   coord_equal()   # To create multiple squares, use your preferred method of iteration: # Creating two squares  library(purrr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Make your specs x_vals <- c(0,4) y_vals <- c(0,0) sizes <- c(1,3) fills <- c(\"purple\", \"yellow\") square_n <- 1:2  # Prep for your iteration lst_square_specs <-   list(     x_vals,     y_vals,     sizes,     fills,     square_n   )  # Use `square_data()` in your preferred iteration methods two_squares <- pmap(lst_square_specs, ~square_data(   x = ..1,   y = ..2,   size = ..3,   fill = ..4,   color = \"#000000\",   group_var = TRUE ) |>   # square_data adds a `group` variable if `group_var` = TRUE.   # For multiple squares, a unique identifier should be added/pasted in.   mutate(group = paste0(group,..5)) ) |>   list_rbind()  # Plot the data  two_squares |>   ggplot(aes(x, y, group = group))+   theme(legend.position = \"none\")+   geom_polygon(color = two_squares$color,                fill = two_squares$fill) +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for 2D Sine and Cosine Waves — wave_data","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"tool making data frames filled data displays sine cosine waves graphed. geom_path geom_polygon geoms recommended data use ggplot2 generative art.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"","code":"wave_data(   start,   end,   size = 1,   type = \"sin\",   orientation = \"horizontal\",   freq = 3,   n_points = 500,   color = NULL,   fill = NULL,   group_var = FALSE,   dampen = NULL,   amplify = NULL )"},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"start Numeric value. starting point wave coordinate system. default refers x-axis. refer y-axis orientation set vertical. Must length 1. end Numeric value. ending point wave coordinate system. default refers x-axis. refer y-axis orientation set vertical Must length 1. size Numeric value. height width wave. Orientation set horizontal default, thus size affect height default. orientation set vertical, size controls width wave. Must positive numeric value. Must length 1. type String value. \"sin\" \"cos\" sine cosine waves. sin default. Must length 1. orientation String value. Default horizontal draw wave left right (x-axis) coordinate system. vertical draw wave bottom top (y-axis) coordinate system. Must length 1. freq Numeric value. Default 3 cycles per second. affects many \"peaks\" created wave. Must positive numeric value. Must length 1. n_points Numeric value. Default 500. determines many points half wave . option can come handy using jitter options texture/illusion methods. Must length 1. color Optional String Value. 6 digit hexadecimal webcolor code, R colors() color string border color wave. Must length 1. fill Optional String Value. 6 digit hexadecimal webcolor code, R colors() color string fill color wave. Must length 1. group_var Logic value. TRUE FALSE. Default FALSE. TRUE, Adds group variable data frame. Useful iterative work make multiple waves single data frame. dampen Optional. factor dampen wave (make \"flatter\"). Must length 1. amplify Optional. factor amplify wave (make \"sharper\"). Must length 1.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"","code":"library(ggplot2) wave_df <- wave_data(   start = 0, end = 10,   fill = \"purple\",   color = \"green\" )  wave_df |>   ggplot(aes(x, y)) +   theme_void() +   geom_polygon(     fill = wave_df$fill,     color = wave_df$color,     linewidth = 3   ) +   coord_equal()"}]
