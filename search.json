[{"path":"https://meghansaha.github.io/artpack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 artpack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://meghansaha.github.io/artpack/articles/brief_examples.html","id":"brief-examples","dir":"Articles","previous_headings":"","what":"Brief Examples","title":"Brief Examples","text":"aRtpack can used create specified dataframes map art fed ggplot2 functions: example, square_data() creates data frame maps square ggplot:   rotator mathematically “rotate” existing data points data frame:  aRtpack functions designed used part workflow. Experiment cool results:","code":"library(ggplot2) library(artpack)  # Use the function to create a data frame # df_square <-   square_data(     x = 0,     y = 0,     size = 5,     color = \"purple\",     fill = \"black\"   )  # Feed it into a ggplot # df_square |>   ggplot(aes(x = x, y = y)) +   geom_polygon(     fill = df_square$fill,     color = df_square$color,     linewidth = 2   ) +   coord_equal() library(ggplot2) library(artpack)  original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) )  rotated_square <- rotator(   data = original_square,   x = x,   y = y,   angle = 120,   anchor = \"center\" )  ggplot() +   geom_path(     data = original_square,     aes(x, y),     color = \"red\"   ) +   geom_polygon(     data = rotated_square,     aes(x, y),     fill = \"green\"   ) +   coord_equal() library(ggplot2) library(purrr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(artpack)  # Create a base square # square <- square_data(x = 0, y = 0, size = 1, group_var = TRUE)  # Create square specs to be iterated on # n_square <- 50 scaler <- seq(1, 5, length = n_square) fills <- art_pals(\"imagination\", n = n_square) angles <- seq(0, 360, length = n_square) group_n <- group_numbers(1:n_square)  # Add a random transformation for a little razzle dazzle ✨ theta <- seq(0, 2 * pi, length = 250)  list_opts <- list(   scaler,   fills,   angles,   group_n )  df <- pmap(   list_opts, ~ rotator(     square |>       mutate(         x = (x + ..1),         y = (y + ..1),         fill = ..2,         group = paste0(group, ..4)       ),     x = x, y = y, angle = ..3   ) ) |>   list_rbind() |>   mutate(     x = x * cos(theta) + x,     y = y * sin(theta) + y * 1.2   )  df |>   ggplot(aes(x = x, y = y, group = rev(group))) +   theme_void() +   theme(plot.background = element_rect(fill = \"#000000\")) +   geom_polygon(     fill = df$fill,     color = \"#000000\",     alpha = .5,     linewidth = 1   ) +   coord_equal(expand = FALSE)"},{"path":"https://meghansaha.github.io/artpack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Meghan Harris. Author, maintainer.","code":""},{"path":"https://meghansaha.github.io/artpack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harris, M. S. (2023). artpack: Creates Generative Art Data. version 0.1.0 https://github.com/Meghansaha/artpack","code":"@Manual{,   title = {{artpack}: Creates Generative Art Data},   author = {Meghan S. Harris and ORCID iD: 0000-0003-3922-8101},   note = {version 0.1.0},   year = {2023},   url = {https://meghansaha.github.io/artpack/}, }"},{"path":"https://meghansaha.github.io/artpack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Creates Generative Art Data","text":"can install {artpack} CRAN following code: can install development version artpack GitHub :","code":"install.packages(\"artpack\") # install.packages(\"devtools\") devtools::install_github(\"Meghansaha/artpack\")"},{"path":"https://meghansaha.github.io/artpack/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Creates Generative Art Data","text":"artpack package helps users create generative art R “data-centric” approach currently early development. artpack intended used ggplot2 artistic purposes.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"what-does-data-centric-mean-in-this-context","dir":"","previous_headings":"Overview","what":"What does data-centric mean in this context?","title":"Creates Generative Art Data","text":"“data-centric” means package focuses providing direct data outputs user, opposed providing geom_fxs() like supplemental packages.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"why-data-outputs-wouldnt-geoms-be-more-efficient-or-user-friendly","dir":"","previous_headings":"Overview","what":"Why data outputs? Wouldn’t geoms be more efficient or user-friendly?","title":"Creates Generative Art Data","text":"necessarily. Data outputs provided afford user freedom manipulation choice. artpack developed make user’s life easier making data generation ggplot2 art easier. data outputs intended used existing ggplot2 geoms like geom_polygon() geom_path(). artistic purposes, can much easier user manipulate direct data frames, opposed trying “hack” geoms.","code":""},{"path":"https://meghansaha.github.io/artpack/index.html","id":"brief-examples","dir":"","previous_headings":"","what":"Brief Examples","title":"Creates Generative Art Data","text":"artpack can used create specified dataframes map art fed ggplot2 functions: example, square_data() creates data frame maps square ggplot:   rotator mathematically “rotate” existing data points data frame:  artpack functions designed used part workflow. Experiment cool results:","code":"library(ggplot2) library(artpack)  # Use the function to create a data frame # df_square <-   square_data(     x = 0,     y = 0,     size = 5,     color = \"purple\",     fill = \"black\"   )  # Feed it into a ggplot # df_square |>   ggplot(aes(x = x, y = y)) +   geom_polygon(     fill = df_square$fill,     color = df_square$color,     linewidth = 2   ) +   coord_equal() library(ggplot2) library(artpack)  original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) )  rotated_square <- rotator(   data = original_square,   x = x,   y = y,   angle = 120,   anchor = \"center\" )  ggplot() +   geom_path(     data = original_square,     aes(x, y),     color = \"red\"   ) +   geom_polygon(     data = rotated_square,     aes(x, y),     fill = \"green\"   ) +   coord_equal() library(ggplot2) library(purrr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tibble) library(artpack)  # Create a base square # square <- square_data(x = 0, y = 0, size = .1, group_var = TRUE)  # Create square specs to be iterated on # n_square <- 500 scaler <- seq(1, 100, length = n_square) fills <- art_pals(\"imagination\", n = n_square) angles <- seq(0, 360, length = n_square) group_n <- group_numbers(1:n_square)  # Add a random transformation for a little razzle dazzle ✨ theta <- seq(0, 30, length = 250)  list_opts <- list(   scaler,   fills,   angles,   group_n )  df <- pmap(list_opts, ~ rotator(   square |>     mutate(       x = (x + ..1),       y = (y * ..1),       fill = ..2,       group = paste0(group, ..4)     ),   x = x, y = y, angle = ..3 )) |>   list_rbind() |>   mutate(     x = x + cos(theta),     y = y + sin(theta)   )    df |>   ggplot(aes(x = x, y = y, group = group)) +   theme_void() +   theme(plot.background = element_rect(fill = \"#000000\")) +   geom_path(     color = df$fill,     alpha = .2   )"},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom-built artpack Color Palettes — art_pals","title":"Custom-built artpack Color Palettes — art_pals","text":"artpack palette picker. art_pals function consists 18 palettes: \"arctic\", \"beach\", \"bw\", \"brood\", \"cosmos\", \"explorer\", \"gemstones\", \"grays\", \"icecream\", \"imagination\", \"majestic\", \"nature\", \"neon\", \"ocean\", \"plants\", \"rainbow\", \"sunnyside\", \"super\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom-built artpack Color Palettes — art_pals","text":"","code":"art_pals(pal = NULL, n = 5, direction = \"regular\", randomize = FALSE)"},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom-built artpack Color Palettes — art_pals","text":"pal character string desired artpack palette. 18 artpack palettes include: \"arctic\" - Icy blue white colors \"beach\" - Sand-colored tans ocean-colored blue colors \"bw\" - gradient black white colors \"brood\" - gradient different shades dark gray black colors \"cosmos\" - Nebula-inspired blue, purple, pink colors \"explorer\" - Pokemon-type inspired colors \"gemstones\" - Birthstone/Mineral-inspired colors \"grays\" - gradient dark, medium, light gray colors \"icecream\" - light pastel palette cream, blue, brown, pink colors \"imagination\" - 90's school supply-inspired colors \"majestic\" - Shades majestic purple colors \"nature\" - mix tan, brown, green, red colors \"neon\" - neon spectrum rainbow colors \"ocean\" - gradient dark light blue colors \"plants\" - gradient dark light green colors \"rainbow\" - vibrant mix rainbow colors \"sunnyside\" - retro-inspired mix pink, orange, yellow colors \"super\" - marveling mix heroic colors n numbers colors desired output. Default 5. n must positive integer value greater 0 direction direction palette Default \"regular\". two options accepted: \"regular\" \"reverse\" randomize Determines colors palette appear randomized order. Default FALSE. Boolean TRUE FALSE accepted.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom-built artpack Color Palettes — art_pals","text":"Character Vector.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/art_pals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom-built artpack Color Palettes — art_pals","text":"","code":"library(ggplot2) dots <- data.frame(x = c(1:10), y = 2.5) dots$fills <- art_pals(\"rainbow\", 10)  dots |>   ggplot(aes(x, y)) +   theme_void() +   geom_point(     shape = 21,     fill = dots$fills,     color = \"#000000\",     size = 10,     stroke = 2   )    dots_rev <- data.frame(x = c(1:10), y = 2.5) dots_rev$fills <- art_pals(\"rainbow\", 10, \"reverse\")  dots_rev |>   ggplot(aes(x, y)) +   theme_void() +   geom_point(     shape = 21,     fill = dots_rev$fills,     color = \"#000000\",     size = 10,     stroke = 2   )   dots_random <- data.frame(x = c(1:10), y = 2.5) dots_random$fills <- art_pals(\"rainbow\", 10, randomize = TRUE)  dots_random |>   ggplot(aes(x, y)) +   theme_void() +   geom_point(     shape = 21,     fill = dots_random$fills,     color = \"#000000\",     size = 10,     stroke = 2   )"},{"path":"https://meghansaha.github.io/artpack/reference/artpack-package.html","id":null,"dir":"Reference","previous_headings":"","what":"artpack: Creates Generative Art Data — artpack-package","title":"artpack: Creates Generative Art Data — artpack-package","text":"Create data displays generative art mapped 'ggplot2' plot. Functionality includes specialized data frame creation geometric shapes, tools define artistic color palettes, tools geometrically transforming data, miscellaneous tools helpful using 'ggplot2' generative art.","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/reference/artpack-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"artpack: Creates Generative Art Data — artpack-package","text":"Maintainer: Meghan Harris meghanha01@gmail.com (ORCID)","code":""},{"path":"https://meghansaha.github.io/artpack/reference/circle_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for Circles — circle_data","title":"Data Generation for Circles — circle_data","text":"tool creating data frame values creates circle specified radius plotted. geom_path geom_polygon geoms recommended data use ggplot2 generative art.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/circle_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for Circles — circle_data","text":"","code":"circle_data(   x,   y,   radius,   color = NULL,   fill = NULL,   n_points = 100,   group_var = FALSE,   group_prefix = \"circle_\" )"},{"path":"https://meghansaha.github.io/artpack/reference/circle_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for Circles — circle_data","text":"x Numeric value length 1 - center x coordinate value circle. y Numeric value length 1 - center y coordinate value circle. radius Numeric value length 1 must greater 0 - radius circle. color Character value length 1 - intended color circle's border. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" fill Character value length 1 - intended color circle. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" n_points Numeric value. Default 100. determines many points circle . option can come handy using jitter options texture/illusion methods. Must length 1 least value 100. group_var Logical. Default FALSE. TRUE, group variable added dataframe. Useful iterative data generation. group_prefix Character string length 1 - prefix used group variable. Default \"circle_\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/circle_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for Circles — circle_data","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/circle_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for Circles — circle_data","text":"","code":"# Creating one circle  library(ggplot2) one_circle <- circle_data(x = 0, y = 0, radius = 5)  # Plot The Data one_circle |>   ggplot(aes(x, y)) +   geom_path(color = \"green\") +   coord_equal()   # To create multiple circles, use your preferred method of iteration: # Creating two circles  library(purrr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Make your specs x_vals <- c(0, 10) y_vals <- c(0, 0) radi <- c(1, 3) fills <- c(\"purple\", \"yellow\") circle_n <- 1:2  # Prep for your iteration lst_circle_specs <-   list(     x_vals,     y_vals,     radi,     fills,     circle_n   )  # Use `circle_data()` in your preferred iteration methods two_circles <- pmap(lst_circle_specs, ~ circle_data(   x = ..1,   y = ..2,   radi = ..3,   fill = ..4,   color = \"#000000\",   group_var = TRUE ) |>   # circle_data adds a `group` variable if `group_var` = TRUE.   # For multiple circles, a unique identifier should be added/pasted in.   mutate(group = paste0(group, ..5))) |>   list_rbind()  # Plot the data  two_circles |>   ggplot(aes(x, y, group = group)) +   theme(legend.position = \"none\") +   geom_polygon(     color = two_circles$color,     fill = two_circles$fill   ) +   coord_equal() #Always use coord_equal() or coord_fixed for circles!"},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for A Custom-built Square Grid — grid_maker","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"Creates dataframe x y points visualize square grid based given x y limits. Providing color palette fill style optional.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"","code":"grid_maker(   xlim,   ylim,   size,   fill_pal = NULL,   fill_style = \"range\",   color_pal = NULL,   color_style = \"range\" )"},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"xlim numeric vector two X limits. minimum maximum limit X axis. Must length 2. ylim numeric vector two Y limits. minimum maximum limit Y axis. Must length 2. size numeric input. size grid. many shapes appear single row column. Must length 1, greater 0, less equal max xlim max ylim. fill_pal Optional. character vector 6 digit hexadecimal webcolor code, R colors() color strings applied fill grid. fill_style Optional. character input. \"range\" \"random\". Determines fill color palette mapped. color_pal Optional. character vector 6 digit hexadecimal webcolor code, R colors() color strings applied borders grid. color_style Optional. character input. \"range\" \"random\". Determines border color palette mapped.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/grid_maker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for A Custom-built Square Grid — grid_maker","text":"","code":"# Creating data for a grid:  library(ggplot2) grid_data <- grid_maker(   xlim = c(0, 50),   ylim = c(0, 50),   size = 10,   fill_pal = c(\"turquoise\", \"black\", \"purple\"),   color_pal = c(\"black\", \"limegreen\") )  ggplot() +   geom_polygon(     data = grid_data,     aes(x, y, group = group),     fill = grid_data$fill,     color = grid_data$color   ) +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"Convert Numbers Padded Strings Easier Group Numbering","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"","code":"group_numbers(numbers, prefix = NULL, suffix = NULL, sep = NULL)"},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"numbers numeric vector length least 1. prefix single string value affixed front numbers provided. suffix single string value affixed behind numbers provided. sep single string value used separate prefix /suffix numbers provided. prefix suffix required use sep.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"Character Vector","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Numbers into Padded Strings for Easier Group Numbering — group_numbers","text":"","code":"# Useful for easier group numbering so groups are ordered as intended # Expects a numeric vector of numbers to convert to padded numbers regular_numbers <- 1:19 padded_numbers <- group_numbers(regular_numbers)  # The padding matters when creating labels for groupings # as numbers will be converted to characters if attached to strings. # Sorts as expected: sort(regular_numbers) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19  # Does not as a character: sort(paste0(\"group_\", regular_numbers)) #>  [1] \"group_1\"  \"group_10\" \"group_11\" \"group_12\" \"group_13\" \"group_14\" #>  [7] \"group_15\" \"group_16\" \"group_17\" \"group_18\" \"group_19\" \"group_2\"  #> [13] \"group_3\"  \"group_4\"  \"group_5\"  \"group_6\"  \"group_7\"  \"group_8\"  #> [19] \"group_9\"   # Will sort as expected when padded: sort(paste0(\"group_\", padded_numbers)) #>  [1] \"group_01\" \"group_02\" \"group_03\" \"group_04\" \"group_05\" \"group_06\" #>  [7] \"group_07\" \"group_08\" \"group_09\" \"group_10\" \"group_11\" \"group_12\" #> [13] \"group_13\" \"group_14\" \"group_15\" \"group_16\" \"group_17\" \"group_18\" #> [19] \"group_19\""},{"path":"https://meghansaha.github.io/artpack/reference/group_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Data Frames by a Group Variable — group_sample","title":"Sample Data Frames by a Group Variable — group_sample","text":"Sample Data Frames Group Variable","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Data Frames by a Group Variable — group_sample","text":"","code":"group_sample(   data,   group,   n = 1,   prop = NULL,   prob = NULL,   group_output = FALSE )"},{"path":"https://meghansaha.github.io/artpack/reference/group_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Data Frames by a Group Variable — group_sample","text":"data data frame tibble least 1 variable. group variable data used groupings. n, prop Supply either n, number groups, prop, proportion groups select. n must positive integer greater equal 1. prop must positive numeric value greater 0 less equal 1. Default n = 1. prob Optional. vector probability weights obtaining elements group sampled. Must length total unique values data's group variable. group_output logical boolean TRUE FALSE. TRUE, returns grouped tibble. Default FALSE.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Data Frames by a Group Variable — group_sample","text":"sampled dataframe","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Data Frames by a Group Variable — group_sample","text":"","code":"vec_coords <- 1:10 df_data <-  data.frame(    \"x\" = vec_coords,    \"y\" = vec_coords,    \"group_col\" = group_numbers(1:5) |> rep(each = 2)  )  df_sampled_data_prop <-  df_data |>  group_sample(group_col, prop = .2)  df_sampled_data_prop #>    x  y group_col #> 1  9  9         5 #> 2 10 10         5  df_sampled_data_n <-  df_data |>  group_sample(group_col, n = 2)  df_sampled_data_n #>    x  y group_col #> 1  7  7         4 #> 2  8  8         4 #> 3  9  9         5 #> 4 10 10         5"},{"path":"https://meghansaha.github.io/artpack/reference/group_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","title":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","text":"Subset Data Frames Group Variable Using Positions","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","text":"","code":"group_slice(   data,   group,   n = 1,   prop = NULL,   position = \"head\",   group_output = FALSE )"},{"path":"https://meghansaha.github.io/artpack/reference/group_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","text":"data data frame tibble least 1 variable. group variable data used groupings. n, prop Supply either n, number groups, prop, proportion groups select. n must positive integer greater equal 1. prop must positive numeric value greater 0 less equal 1. Default n = 1. position character string \"head\" \"tail\". Determines first group last group data frame selected \"head\" select first group dataframe \"tail\" select last group. group_output logical boolean TRUE FALSE. TRUE, returns grouped tibble. Default FALSE","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","text":"sliced dataframe","code":""},{"path":"https://meghansaha.github.io/artpack/reference/group_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Data Frames by a Group Variable Using Their Positions — group_slice","text":"","code":"vec_coords <- 1:10 df_data <-  data.frame(    \"x\" = vec_coords,    \"y\" = vec_coords,    \"group_col\" = group_numbers(1:5) |> rep(each = 2)  )  df_sliced_data_head <-  df_data |>  group_slice(group_col, n = 2, position = \"head\")  df_sliced_data_head #>   x y group_col #> 1 1 1         1 #> 2 2 2         1 #> 3 3 3         2 #> 4 4 4         2  df_sliced_data_tail <-  df_data |>  group_slice(group_col, n = 2, position = \"tail\")  df_sliced_data_tail #>    x  y group_col #> 4 10 10         5 #> 3  9  9         5 #> 2  8  8         4 #> 1  7  7         4  df_sliced_data_prop <-  df_data |>  group_slice(group_col, prop = .80)  df_sliced_data_prop #>   x y group_col #> 1 1 1         1 #> 2 2 2         1 #> 3 3 3         2 #> 4 4 4         2 #> 5 5 5         3 #> 6 6 6         3 #> 7 7 7         4 #> 8 8 8         4"},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for Circle Packing — packer","title":"Data Generation for Circle Packing — packer","text":"tool creating data frame values create circle packing design plotted. default circle_type \"whole\" used, output mapped geom_polygon ggplot. \"swirl\" used, output mapped geom_path best results.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for Circle Packing — packer","text":"","code":"packer(   n,   min_x = 0,   max_x = 100,   min_y = 0,   max_y = 100,   big_r = 5,   med_r = 3,   small_r = 1,   color_pal = NULL,   color_type = \"regular\",   circle_type = \"whole\" )"},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for Circle Packing — packer","text":"n total number circles like function attempt create. single numeric value minimum value 10. min_x minimum limit x-axis - left 'border' canvas single numeric value. max_x maximum limit x-axis - right 'border' canvas single numeric value. min_y minimum limit y-axis - bottom 'border' canvas single numeric value. max_y maximum limit y-axis - top 'border' canvas single numeric value. big_r radius used 'big' sized circles single numeric value. med_r radius used 'medium' sized circles. single numeric value. small_r radius used 'small' sized circles. single numeric value. color_pal vector hex color codes mapped data. color_type Default \"regular\" - colors mapped order big circles small circles. \"reverse\" - colors mapped reversed order small big circles. \"random\" - colors mapped randomly sized circle. circle_type Default \"whole\" - Regular circles. \"swirl\" - circles replaced spirals. Spirals mapped geom_path ggplot best results.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for Circle Packing — packer","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/packer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for Circle Packing — packer","text":"","code":"library(ggplot2) set.seed(0310) packed_circles <- packer(   n = 50, big_r = 5, med_r = 3, small_r = 1,   min_x = 0, max_x = 100, min_y = 0, max_y = 100 ) #> ⠙ Sampling for big-sized circles started #> ✔ Sampling for big-sized circles started [16ms] #>  #> ℹ Big-sized circles complete! #> ✔ Big-sized circles complete! [13ms] #>  #> ⠙ Sampling for medium-sized circles started #> ✔ Sampling for medium-sized circles started [42ms] #>  #> ℹ Medium-sized circles complete! #> ✔ Medium-sized circles complete! [12ms] #>  #> ⠙ Sampling for small-sized circles started #> ✔ Sampling for small-sized circles started [25ms] #>  #> ℹ Small-sized circles complete! #> ✔ Small-sized circles complete! [19ms] #>  packed_circles #> # A tibble: 5,000 × 3 #> # Groups:   group [50] #>        x     y group #>    <dbl> <dbl> <chr> #>  1  13    19   big_1 #>  2  13.0  19.3 big_1 #>  3  13.0  19.6 big_1 #>  4  12.9  19.9 big_1 #>  5  12.8  20.3 big_1 #>  6  12.8  20.6 big_1 #>  7  12.6  20.9 big_1 #>  8  12.5  21.1 big_1 #>  9  12.4  21.4 big_1 #> 10  12.2  21.7 big_1 #> # ℹ 4,990 more rows  packed_circles |>   ggplot(aes(x, y, group = group)) +   theme_void() +   theme(plot.background = element_rect(fill = \"black\")) +   geom_polygon(fill = \"white\", color = \"red\") +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"Rotates x y points given data frame given angle based designated anchor point.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"","code":"rotator(data, x, y, angle = 5, anchor = \"center\", drop = FALSE)"},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"data data frame tibble least x y variables x numeric variable data. variable intended plotted x axis ggplot. y numeric variable data. variable intended plotted y axis ggplot. angle angle (degrees) points data rotated around anchor anchor anchor point rotation. Default \"center\". Options include:\"center\", \"bottom\", \"top\", \"left\", \"right\" drop Logical TRUE FALSE determines variables rotated removed final output. Default FALSE.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"data frame","code":""},{"path":"https://meghansaha.github.io/artpack/reference/rotator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate Points in a Data Frame Based on an Anchor Point — rotator","text":"","code":"library(ggplot2) original_square <- data.frame(   x = c(0, 3, 3, 0, 0),   y = c(0, 0, 3, 3, 0) ) rotated_square <- rotator(data = original_square,                           x = x,                           y = y,                           angle = 45,                           anchor = \"center\")  ggplot()+   geom_path(data = original_square,                      aes(x,y),                      color = \"red\")+   geom_polygon(data = rotated_square,                         aes(x,y),                         fill = \"purple\")+   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/seq_bounce.html","id":null,"dir":"Reference","previous_headings":"","what":"Bouncing Sequence Generation — seq_bounce","title":"Bouncing Sequence Generation — seq_bounce","text":"Generate regular sequence 'bounces' provided start_n end_n values increments value length length value provided.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/seq_bounce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bouncing Sequence Generation — seq_bounce","text":"","code":"seq_bounce(start_n = NULL, end_n = NULL, length = NULL, by = 1)"},{"path":"https://meghansaha.github.io/artpack/reference/seq_bounce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bouncing Sequence Generation — seq_bounce","text":"start_n lower (min) numeric bound sequence generated. Must < end_n. end_n upper (max) numeric bound sequence generated. Must > start_n. length desired length generated sequence. number increment sequence.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/seq_bounce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bouncing Sequence Generation — seq_bounce","text":"numeric vector","code":""},{"path":"https://meghansaha.github.io/artpack/reference/seq_bounce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bouncing Sequence Generation — seq_bounce","text":"","code":"#By default, seq_bounce creates sequences by increments of 1 #The length argument accepts any positive integer seq_bounce(start_n = 1, end_n = 5, length = 15) #>  [1] 1 2 3 4 5 4 3 2 1 2 3 4 5 4 3  #The by argument accepts any positive numeric seq_bounce(start_n = 0, end_n = 10, length = 30, by = .247) #>  [1] 0.000 0.247 0.494 0.741 0.988 1.235 1.482 1.729 1.976 2.223 2.470 2.717 #> [13] 2.964 3.211 3.458 3.705 3.952 4.199 4.446 4.693 4.940 5.187 5.434 5.681 #> [25] 5.928 6.175 6.422 6.669 6.916 7.163  #The end_n value must be greater than the start_n value #This will give you an error try(seq_bounce(start_n = 0, end_n = -10, length = 15)) #> Error in seq_bounce(start_n = 0, end_n = -10, length = 15) :  #>   ✖ `start_n` must be less than `end_n` not more than or equal to `end_n` #> ! You've supplied: `start_n` == 0 and `end_n` == -10 #> ℹ Check the `start_n` and `end_n` inputs.  #Instead, reverse the values seq_bounce(start_n = -10, end_n = 0, length = 15) #>  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0  -1  -2  -3  -4"},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for Squares — square_data","title":"Data Generation for Squares — square_data","text":"tool creating data frame values create square specified size plotted. geom_path geom_polygon geoms recommended data use ggplot2 generative art.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for Squares — square_data","text":"","code":"square_data(   x,   y,   size,   color = NULL,   fill = NULL,   n_points = 100,   group_var = FALSE,   group_prefix = \"square_\" )"},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for Squares — square_data","text":"x Numeric value length 1 - bottom left x value square. y Numeric value length 1 - bottom left y value square. size Numeric value length 1 must greater 0 - size square. color Character value length 1 - color square's border. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" fill Character value length 1 - color square. valid R color colors() standard 6 digit hexadecimal webcolor like \"#000000\" n_points Numeric value. Default 100. determines many points square . option can come handy using jitter options texture/illusion methods. Must length 1 least value 4. group_var Logical. Default FALSE. TRUE, group variable added dataframe. Useful iterative data generation. group_prefix Character string length 1 - prefix used group variable. Default \"square_\"","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for Squares — square_data","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/square_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for Squares — square_data","text":"","code":"# Creating one square library(ggplot2) one_square <- square_data(x = 0, y = 0, size = 5)  # Plot The Data one_square |>   ggplot(aes(x,y))+   geom_path(color = \"green\")+   coord_equal()   # To create multiple squares, use your preferred method of iteration: # Creating two squares  library(purrr) library(dplyr)  # Make your specs x_vals <- c(0,4) y_vals <- c(0,0) sizes <- c(1,3) fills <- c(\"purple\", \"yellow\") square_n <- 1:2  # Prep for your iteration lst_square_specs <-   list(     x_vals,     y_vals,     sizes,     fills,     square_n   )  # Use `square_data()` in your preferred iteration methods two_squares <- pmap(lst_square_specs, ~square_data(   x = ..1,   y = ..2,   size = ..3,   fill = ..4,   color = \"#000000\",   group_var = TRUE ) |>   # square_data adds a `group` variable if `group_var` = TRUE.   # For multiple squares, a unique identifier should be added/pasted in.   mutate(group = paste0(group,..5)) ) |>   list_rbind()  # Plot the data  two_squares |>   ggplot(aes(x, y, group = group))+   theme(legend.position = \"none\")+   geom_polygon(color = two_squares$color,                fill = two_squares$fill) +   coord_equal()"},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Generation for 2D Sine and Cosine Waves — wave_data","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"tool making data frames filled data displays sine cosine waves graphed. geom_path geom_polygon geoms recommended data use ggplot2 generative art.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"","code":"wave_data(   start,   end,   size = 1,   type = \"sin\",   orientation = \"horizontal\",   freq = 3,   n_points = 500,   color = NULL,   fill = NULL,   group_var = FALSE,   dampen = NULL,   amplify = NULL )"},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"start Numeric value. starting point wave coordinate system. default refers x-axis. refer y-axis orientation set vertical. Must length 1. end Numeric value. ending point wave coordinate system. default refers x-axis. refer y-axis orientation set vertical Must length 1. size Numeric value. height width wave. Orientation set horizontal default, thus size affect height default. orientation set vertical, size controls width wave. Must positive numeric value. Must length 1. type String value. \"sin\" \"cos\" sine cosine waves. sin default. Must length 1. orientation String value. Default horizontal draw wave left right (x-axis) coordinate system. vertical draw wave bottom top (y-axis) coordinate system. Must length 1. freq Numeric value. Default 3 cycles per second. affects many \"peaks\" created wave. Must positive numeric value. Must length 1. n_points Numeric value. Default 500. determines many points half wave . option can come handy using jitter options texture/illusion methods. Must length 1. color Optional String Value. 6 digit hexadecimal webcolor code, R colors() color string border color wave. Must length 1. fill Optional String Value. 6 digit hexadecimal webcolor code, R colors() color string fill color wave. Must length 1. group_var Logic value. TRUE FALSE. Default FALSE. TRUE, Adds group variable data frame. Useful iterative work make multiple waves single data frame. dampen Optional. factor dampen wave (make \"flatter\"). Must length 1. amplify Optional. factor amplify wave (make \"sharper\"). Must length 1.","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"Tibble","code":""},{"path":"https://meghansaha.github.io/artpack/reference/wave_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Generation for 2D Sine and Cosine Waves — wave_data","text":"","code":"library(ggplot2) wave_df <- wave_data(   start = 0, end = 10,   fill = \"purple\",   color = \"green\" )  wave_df |>   ggplot(aes(x, y)) +   theme_void() +   geom_polygon(     fill = wave_df$fill,     color = wave_df$color,     linewidth = 3   ) +   coord_equal()"},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-6","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.6","text":"Added randomize argument art_pals() allows palette order sampled. Streamlined test suites art_pals(). Small copy-paste corrections.","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-5","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.5","text":"Added seq_bounce(). Added internal utility helper functions. Improved test suite internal utility helper functions. Regenerated pkgdown favicons. Rectified unknown global variables. Added subtitles package index (reference) page.","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-4","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.4 (Development Version)","text":"Added test suite internal utility helper functions.","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-3","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.3","text":"Added prefix, suffix, sep arguments group_numbers().","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-2-9000","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.2.9000","text":"Added group_slice() allows slicing data frames tibbles group variable.","code":""},{"path":[]},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"new-functions-and-updates-0-1-2","dir":"Changelog","previous_headings":"","what":"New Functions and Updates","title":"artpack 0.1.2","text":"Added group_sample() allows sampling data frames tibbles group variable. Increased minimum required version R DESCRIPTION R (>= 4.1.0). Corrected circle_data() help documentation.","code":""},{"path":"https://meghansaha.github.io/artpack/news/index.html","id":"artpack-010","dir":"Changelog","previous_headings":"","what":"artpack 0.1.0","title":"artpack 0.1.0","text":"CRAN release: 2023-08-24 Initial Release CRAN","code":""}]
