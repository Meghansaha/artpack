% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/square_packer.R
\name{square_packer}
\alias{square_packer}
\title{Data Generation for Square Packing}
\usage{
square_packer(
  n,
  min_x = 0,
  max_x = 100,
  min_y = 0,
  max_y = 100,
  big_r = 5,
  med_r = 2,
  small_r = 1,
  color_pal = NULL,
  color_type = "regular",
  angles = FALSE
)
}
\arguments{
\item{n}{The total number of squares you would like the function to attempt to create. A single numeric value.}

\item{min_x}{The minimum limit of the x-axis - the left 'border' of the canvas A single numeric value.}

\item{max_x}{The maximum limit of the x-axis - the right 'border' of the canvas A single numeric value.}

\item{min_y}{The minimum limit of the y-axis - the bottom 'border' of the canvas A single numeric value.}

\item{max_y}{The maximum limit of the y-axis - the top 'border' of the canvas A single numeric value.}

\item{big_r}{The radius used for your 'big' sized squares A single numeric value.}

\item{med_r}{The radius used for your 'medium' sized squares. A single numeric value.}

\item{small_r}{The radius used for your 'small' sized squares. A single numeric value.}

\item{color_pal}{A vector of hex color codes that will be mapped to the data.}

\item{color_type}{Default is "regular" - The colors will be mapped in order from big squares to small squares. "reverse" - The colors will be mapped in reversed order from small to big squares. "random" - The colors will be mapped randomly to any sized square.}

\item{angles}{Default is \code{FALSE}. \code{TRUE} turns on rotations for the squares.}
}
\value{
A Tibble
}
\description{
A tool for creating a data frame of values that create a square packing design when plotted.
}
\examples{
packed_squares <- square_packer(500,
                                color_pal = art_pals("sunnyside",5),
                                color_type = "random")

packed_squares |>
  ggplot(aes(x,y, group = group))+
  theme_void()+
  theme(plot.background = element_rect(fill = "#000000"))+
  geom_polygon(fill = packed_squares$fill,
               color = "#000000",
               linewidth = 1)+
  coord_equal()

}
